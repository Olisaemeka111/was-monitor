name: AWS Monitor CI/CD

# Required secrets for this workflow:
# AWS_ACCESS_KEY_ID: AWS access key for deploying infrastructure and pushing to ECR
# AWS_SECRET_ACCESS_KEY: AWS secret key for deploying infrastructure and pushing to ECR
# GITHUB_TOKEN: Automatically provided by GitHub, used for repository access

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TERRAFORM_WORKING_DIR: terraform

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image-tag.outputs.tag }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies and update lock file
      run: |
        rm -f package-lock.json
        npm install

    - name: Run linting
      run: npm run lint || true

    - name: Build application
      run: npm run build

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc

    - name: Run tests
      run: npm test || true

    - name: Generate image tag
      id: image-tag
      run: |
        echo "tag=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

  setup-terraform-state:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    outputs:
      state_bucket: ${{ steps.state-setup.outputs.state_bucket }}
      state_lock_table: ${{ steps.state-setup.outputs.state_lock_table }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Initialize Terraform for state setup
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: terraform init

    - name: Get existing state resources
      id: state-setup
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: |
        echo "state_bucket=aws-monitor-tf-state-156041437006" >> $GITHUB_OUTPUT
        echo "state_lock_table=aws-monitor-tf-lock-156041437006" >> $GITHUB_OUTPUT

  build-and-push-image:
    needs: [setup-terraform-state, build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    outputs:
      image_url: ${{ steps.build-push.outputs.image_url }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push image to ECR
      id: build-push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ needs.build-and-test.outputs.image_tag }}
      run: |
        docker build -t $ECR_REGISTRY/aws-monitor:$IMAGE_TAG .
        docker push $ECR_REGISTRY/aws-monitor:$IMAGE_TAG
        echo "image_url=$ECR_REGISTRY/aws-monitor:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    needs: [setup-terraform-state, build-and-push-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    outputs:
      ecr_repository: ${{ steps.terraform-outputs.outputs.ecr_repository }}
      task_definition: ${{ steps.terraform-outputs.outputs.task_definition }}
      ecs_service: ${{ steps.terraform-outputs.outputs.ecs_service }}
      ecs_cluster: ${{ steps.terraform-outputs.outputs.ecs_cluster }}
      load_balancer_url: ${{ steps.terraform-outputs.outputs.load_balancer_url }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Configure Terraform backend
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: |
        cat > backend.tf << 'EOF'
        terraform {
          backend "s3" {
            bucket         = "aws-monitor-tf-state-156041437006"
            key            = "terraform.tfstate"
            region         = "us-east-1"
            dynamodb_table = "aws-monitor-tf-lock-156041437006"
            encrypt        = true
          }
        }
        EOF

    - name: Terraform Init with S3 backend
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: terraform init -reconfigure

    - name: Terraform Apply
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: terraform apply -auto-approve

    - name: Get Terraform Outputs
      id: terraform-outputs
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
      run: |
        # Save outputs to files first to handle special characters
        terraform output -json > tf_output.json
        echo "ecr_repository=$(jq -r .ecr_repository_url.value tf_output.json)" >> $GITHUB_OUTPUT
        echo "task_definition=$(jq -r .task_definition_family.value tf_output.json)" >> $GITHUB_OUTPUT
        echo "ecs_service=$(jq -r .ecs_service_name.value tf_output.json)" >> $GITHUB_OUTPUT
        echo "ecs_cluster=$(jq -r .ecs_cluster_name.value tf_output.json)" >> $GITHUB_OUTPUT
        echo "load_balancer_url=$(jq -r .load_balancer_url.value tf_output.json)" >> $GITHUB_OUTPUT





  deploy-to-ecs:
    needs: [deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
      actions: read
      security-events: write

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: true

    - name: Download task definition
      run: |
        echo "Listing all task definitions for aws-monitor family..."
        aws ecs list-task-definitions --family-prefix aws-monitor --sort DESC --max-items 5
        
        echo "\nGetting latest active task definition..."
        TASK_DEF_ARN=$(aws ecs list-task-definitions --family-prefix aws-monitor --sort DESC --max-items 1 --query 'taskDefinitionArns[0]' --output text)
        echo "Latest task definition ARN: $TASK_DEF_ARN"
        
        echo "\nDownloading task definition..."
        aws ecs describe-task-definition \
          --task-definition "$TASK_DEF_ARN" \
          --query taskDefinition > task-definition.json
        
        echo "\nTask definition content:"
        cat task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: aws-monitor
        image: ${{ needs.deploy-infrastructure.outputs.ecr_repository }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ needs.deploy-infrastructure.outputs.ecs_service }}
        cluster: ${{ needs.deploy-infrastructure.outputs.ecs_cluster }}
        wait-for-service-stability: true

    - name: Display Application URL
      id: app-url
      run: |
        APP_URL="http://${{ needs.deploy-infrastructure.outputs.load_balancer_url }}"
        echo "✨ Application is now available at: $APP_URL"
        echo "⏳ Note: It may take a few minutes for DNS to propagate and the application to be fully available"
        echo "url=$APP_URL" >> $GITHUB_OUTPUT

    - name: Wait for Application Health
      run: |
        echo "Debug: Load balancer URL from Terraform = ${{ needs.deploy-infrastructure.outputs.load_balancer_url }}"
        APP_URL="http://${{ needs.deploy-infrastructure.outputs.load_balancer_url }}"
        echo "Debug: Full application URL = $APP_URL"
        
        echo "Waiting for application to be healthy..."
        for i in {1..60}; do
          echo "Debug: Attempt $i - Curling $APP_URL"
          HTTP_STATUS=$(curl -v "$APP_URL" 2>&1 || true)
          echo "Debug: Full curl output:"
          echo "$HTTP_STATUS"
          
          STATUS_CODE=$(echo "$HTTP_STATUS" | grep -o 'HTTP/[0-9.]* [0-9]\{3\}' | tail -1 | awk '{print $2}')
          echo "Debug: Extracted status code = $STATUS_CODE"
          
          if [[ "$STATUS_CODE" =~ ^(200|301|302|303|307|308)$ ]]; then
            echo "✅ Application is healthy and responding with HTTP $STATUS_CODE"
            exit 0
          fi
          echo "Attempt $i: Application returned HTTP $STATUS_CODE, waiting 10 seconds..."
          sleep 10
        done
        echo "❌ Application health check failed after 10 minutes"
        exit 1

    - name: Verify API Endpoints
      run: |
        echo "Testing key API endpoints..."
        APP_URL="${{ steps.app-url.outputs.url }}"
        
        # Test root endpoint
        ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL")
        echo "Root endpoint (/) status: $ROOT_STATUS"
        
        # Test accounts endpoint
        ACCOUNTS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/api/accounts")
        echo "Accounts endpoint (/api/accounts) status: $ACCOUNTS_STATUS"
        
        # Test metrics endpoint
        METRICS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/api/metrics")
        echo "Metrics endpoint (/api/metrics) status: $METRICS_STATUS"
        
        # Verify all endpoints are responding
        if [ "$ROOT_STATUS" = "200" ] && [ "$ACCOUNTS_STATUS" = "200" ] && [ "$METRICS_STATUS" = "200" ]; then
          echo "✅ All endpoints are responding correctly"
        else
          echo "❌ Some endpoints are not responding correctly"
          exit 1
        fi

    - name: Check CloudWatch Metrics
      run: |
        echo "Checking CloudWatch metrics for the service..."
        
        # Get timestamps for 5 minutes ago and now
        START_TIME=$(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S)
        END_TIME=$(date -u +%Y-%m-%dT%H:%M:%S)
        
        # Check ECS service metrics
        aws cloudwatch get-metric-statistics \
          --namespace AWS/ECS \
          --metric-name CPUUtilization \
          --dimensions Name=ClusterName,Value=${{ needs.deploy-infrastructure.outputs.ecs_cluster }} Name=ServiceName,Value=${{ needs.deploy-infrastructure.outputs.ecs_service }} \
          --start-time "$START_TIME" \
          --end-time "$END_TIME" \
          --period 300 \
          --statistics Average
        
        # Check ALB metrics
        aws cloudwatch get-metric-statistics \
          --namespace AWS/ApplicationELB \
          --metric-name TargetResponseTime \
          --dimensions Name=LoadBalancer,Value=${{ needs.deploy-infrastructure.outputs.load_balancer_url }} \
          --start-time "$START_TIME" \
          --end-time "$END_TIME" \
          --period 300 \
          --statistics Average
